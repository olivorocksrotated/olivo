// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  requesters    NetworkConnection[] @relation("requester")
  acceptors     NetworkConnection[] @relation("acceptor")
  commitments   Commitment[]
  moods         Mood[]
  notifications Notification[]
  notes         Note[]
  aiExecutions  AiExecution[]
}

model NetworkConnection {
  id          String   @id @default(cuid())
  requester   User     @relation("requester", fields: [requesterId], references: [id])
  requesterId String
  acceptor    User     @relation("acceptor", fields: [acceptorId], references: [id])
  acceptorId  String
  createdAt   DateTime @default(now())
  active      Boolean  @default(true)

  @@unique([requesterId, acceptorId])
  @@index([acceptorId])
  @@index([requesterId])
}

model Commitment {
  id          String           @id @default(cuid())
  title       String
  description Json?
  status      CommitmentStatus @default(NotStartedYet)
  doneBy      DateTime         @default(now())
  doneAt      DateTime?
  createdAt   DateTime         @default(now())
  owner       User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String

  @@index([ownerId])
}

model Mood {
  id        String     @id @default(cuid())
  status    MoodStatus
  comment   String?    @db.Text
  createdAt DateTime   @default(now())
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String

  @@index([ownerId])
}

model Notification {
  id        String             @id @default(cuid())
  title     String
  payload   Json
  type      NotificationType
  status    NotificationStatus @default(Open)
  createdAt DateTime           @default(now())
  owner     User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String

  @@index([ownerId])
}

model Note {
  id      String @id @default(cuid())
  text    String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String
  tags    String

  @@index([ownerId])
}

model AiExecution {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  owner         User            @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
  executionName AiExecutionName
  response      String          @db.Text

  @@index([ownerId])
}

enum CommitmentStatus {
  NotStartedYet
  InProgress
  Done
  Abandoned
}

enum MoodStatus {
  Excellent
  Good
  Average
  Okayish
  Bad
}

enum NotificationStatus {
  Open
  Read
}

enum NotificationType {
  UnfinishedCommitments
  SignupWelcome
}

enum AiExecutionName {
  MoodSummary
  MoodAdvice
}
